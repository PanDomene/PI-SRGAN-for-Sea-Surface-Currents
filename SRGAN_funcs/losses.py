import tensorflow as tf

##############################################################################
################################### Losses ###################################
##############################################################################

def content_loss(vgg_model, hr, sr):
    """
    Computes content loss using VGG19 feature representations.

    Args:
        vgg_model: A pre-trained VGG19 model that outputs feature maps.
        hr: Tensor. Ground truth high-resolution image.
        sr: Tensor. Super-resolved image generated by the generator.

    Returns:
        Tensor: Mean squared error between VGG feature maps.
    """
    hr_features = vgg_model(hr)
    sr_features = vgg_model(sr)
    return tf.reduce_mean(tf.square(hr_features - sr_features))

def discriminator_loss(hr_score, sr_score):
    """
    Computes the discriminator's adversarial loss.

    Args:
        hr_score: Tensor. Discriminator's prediction for real HR images.
        sr_score: Tensor. Discriminator's prediction for generated SR images.

    Returns:
        Tensor: Total binary crossentropy loss from both HR and SR scores.
    """
    bce = tf.keras.losses.BinaryCrossentropy(from_logits=False)
    hr_loss = bce(tf.ones_like(hr_score), hr_score)
    sr_loss = bce(tf.zeros_like(sr_score), sr_score)
    return hr_loss + sr_loss

def adversarial_loss(sr_score):
    """
    Computes the generator's adversarial loss.

    Args:
        sr_score: Tensor. Discriminator's prediction for generated SR images.

    Returns:
        Tensor: Binary crossentropy loss encouraging generator to fool the discriminator.
    """
    bce = tf.keras.losses.BinaryCrossentropy(from_logits=False)
    return bce(tf.ones_like(sr_score), sr_score)